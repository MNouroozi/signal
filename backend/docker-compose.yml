services:
  postgres:
    image: postgres:latest
    container_name: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 10s
      retries: 5
      timeout: 5s
    restart: always
    networks:
      - backend

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - "${PGADMIN_PORT}:80"
    depends_on:
      - postgres
    volumes:
      - ./data/pgadmin:/var/lib/pgadmin
    restart: always
    networks:
      - backend

  minio:
    image: minio/minio:latest
    container_name: minio
    restart: always
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    ports:
      - "${MINIO_PORT_1}:9000"
      - "${MINIO_PORT_2}:9001"
    command: server /data --console-address ":9001"
    volumes:
      - ./data/minio:/data
      - ./config/minio:/root/.minio
    healthcheck:
      test: [ "CMD", "mc", "ls", "myminio/" ]
      retries: 3
      interval: 30s
    networks:
      - backend

  kafka:
    image: confluentinc/cp-kafka:latest
    hostname: kafka
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_KRAFT_MODE: "true"
      KAFKA_NODE_ID: 1
      CLUSTER_ID: "MkU3OEVBNTcwNTJENDM2Qk"
      KAFKA_MESSAGE_MAX_BYTES: 104857600 # Increase max message size to 100MB
      KAFKA_REPLICA_FETCH_MAX_BYTES: 104857600 # Increase replica fetch max bytes to 100MB
      MAX_REQUEST_SIZE_CONFIG: 104857600 # Set max request size to 100MB      
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true" # Kafka will automatically create topics if needed.
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1 # Since weâ€™re running one broker, one replica is enough.
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,LISTENER_BOB:PLAINTEXT,LISTENER_FRED:PLAINTEXT"
      KAFKA_ADVERTISED_LISTENERS: "LISTENER_BOB://kafka:29092,LISTENER_FRED://localhost:9092"
      KAFKA_PROCESS_ROLES: "broker,controller"
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka:29093"
      KAFKA_LISTENERS: "CONTROLLER://kafka:29093,LISTENER_BOB://kafka:29092,LISTENER_FRED://0.0.0.0:9092"
      KAFKA_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_INTER_BROKER_LISTENER_NAME: "LISTENER_BOB"
    networks:
      - backend

  control-center:
    image: confluentinc/cp-enterprise-control-center:latest
    container_name: control-center
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: "kafka:29092"
      CONTROL_CENTER_LISTENER_PORT: 9021
      CONTROL_CENTER_REPLICATION_FACTOR: "1"
    ports:
      - "9021:9021"
    depends_on:
      - kafka
    networks:
      - backend

  # grafana:
  #   image: grafana/grafana:latest
  #   container_name: grafana
  #   ports:
  #     - "3000:3000"
  #   environment:
  #     - GF_SECURITY_ADMIN_USER=admin
  #     - GF_SECURITY_ADMIN_PASSWORD=admin123
  #   volumes:
  #     - ./data/grafana:/var/lib/grafana
  #   networks:
  #     - backend

  # clickhouse:
  #   image: clickhouse/clickhouse-server:latest
  #   container_name: clickhouse
  #   ports:
  #     - "8123:8123"
  #     - "9004:9000"
  #   environment:
  #     CLICKHOUSE_DB: ${CLICKHOUSE_DB}
  #     CLICKHOUSE_USER: ${CLICKHOUSE_USER}
  #     CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD}
  #   volumes:
  #     - ./data/clickhouse:/var/lib/clickhouse
  #   healthcheck:
  #     test: ["CMD", "clickhouse-client", "--query", "SELECT 1"]
  #     retries: 5
  #     interval: 30s
  #   networks:
  #     - backend

  # fluent-bit:
  #   image: cr.fluentbit.io/fluent/fluent-bit:latest
  #   container_name: fluent-bit
  #   environment:
  #     - FLUENT_BIT_CONFIG_FILE=/fluent-bit/etc/fluent-bit.conf
  #   volumes:
  #     - ./config/fluent-bit:/fluent-bit/etc
  #     - ./data/logs:/var/log
  #   depends_on:
  #     - clickhouse
  #   ports:
  #     - "24224:24224"
  #   networks:
  #     - backend

  # app:
  #   image: myapp
  #   container_name: app
  #   networks:
  #     - backend
  #   depends_on:
  #     - postgres
  #   volumes:
  #     - ./data/signal:/.env
      
networks:
  backend:
    driver: bridge
    name: backend
